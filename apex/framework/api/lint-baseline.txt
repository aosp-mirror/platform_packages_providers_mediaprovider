// Baseline format: 1.0
FlaggedApiLiteral: android.provider.EmbeddedPhotoPickerClient:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_ENABLE_EMBEDDED_PHOTOPICKER, however this flag doesn't seem to exist).
FlaggedApiLiteral: android.provider.EmbeddedPhotoPickerException:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_ENABLE_EMBEDDED_PHOTOPICKER, however this flag doesn't seem to exist).
FlaggedApiLiteral: android.provider.EmbeddedPhotoPickerFeatureInfo:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_ENABLE_EMBEDDED_PHOTOPICKER, however this flag doesn't seem to exist).
FlaggedApiLiteral: android.provider.EmbeddedPhotoPickerProvider:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_ENABLE_EMBEDDED_PHOTOPICKER, however this flag doesn't seem to exist).
FlaggedApiLiteral: android.provider.EmbeddedPhotoPickerProviderFactory:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_ENABLE_EMBEDDED_PHOTOPICKER, however this flag doesn't seem to exist).
FlaggedApiLiteral: android.provider.EmbeddedPhotoPickerSession:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_ENABLE_EMBEDDED_PHOTOPICKER, however this flag doesn't seem to exist).
FlaggedApiLiteral: android.provider.MediaStore#EXTRA_PICKER_PRE_SELECTION_URIS:
    @FlaggedApi contains a string literal, but should reference the field generated by aconfig (com.android.providers.media.flags.Flags.FLAG_PICKER_PRE_SELECTION, however this flag doesn't seem to exist).


MissingNullability: android.provider.EmbeddedPhotoPickerException#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.provider.EmbeddedPhotoPickerException`
MissingNullability: android.provider.EmbeddedPhotoPickerException#getActualCause():
    Missing nullability on method `getActualCause` return
MissingNullability: android.provider.EmbeddedPhotoPickerException#readFromParcel(android.os.Parcel):
    Missing nullability on method `readFromParcel` return
MissingNullability: android.provider.EmbeddedPhotoPickerException#readFromParcel(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `readFromParcel`
MissingNullability: android.provider.EmbeddedPhotoPickerException#writeToParcel(android.os.Parcel, Throwable) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.provider.EmbeddedPhotoPickerException#writeToParcel(android.os.Parcel, Throwable) parameter #1:
    Missing nullability on parameter `t` in method `writeToParcel`
MissingNullability: android.provider.EmbeddedPhotoPickerException#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.provider.ParcelableException#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.provider.ParcelableException`
MissingNullability: android.provider.ParcelableException#readFromParcel(String, android.os.Parcel):
    Missing nullability on method `readFromParcel` return
MissingNullability: android.provider.ParcelableException#readFromParcel(String, android.os.Parcel) parameter #0:
    Missing nullability on parameter `msg` in method `readFromParcel`
MissingNullability: android.provider.ParcelableException#readFromParcel(String, android.os.Parcel) parameter #1:
    Missing nullability on parameter `in` in method `readFromParcel`
MissingNullability: android.provider.ParcelableException#readFromParcel(android.os.Parcel):
    Missing nullability on method `readFromParcel` return
MissingNullability: android.provider.ParcelableException#readFromParcel(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `readFromParcel`
MissingNullability: android.provider.ParcelableException#writeToParcel(android.os.Parcel, Throwable) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.provider.ParcelableException#writeToParcel(android.os.Parcel, Throwable) parameter #1:
    Missing nullability on parameter `t` in method `writeToParcel`
MissingNullability: android.provider.ParcelableException#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`


NotCloseable: android.provider.EmbeddedPhotoPickerSession:
    Classes that release resources (close()) should implement AutoCloseable and CloseGuard: class android.provider.EmbeddedPhotoPickerSession


PackageLayering: android.provider.EmbeddedPhotoPickerSession:
    Method return type `android.view.SurfaceControlViewHost.SurfacePackage` violates package layering: nothing in `package android.provider` should depend on `package android.view`


RequiresPermission: android.provider.MediaStore#canManageMedia(android.content.Context):
    Method 'canManageMedia' documentation mentions permissions without declaring @RequiresPermission
RequiresPermission: android.provider.MediaStore#setRequireOriginal(android.net.Uri):
    Method 'setRequireOriginal' documentation mentions permissions without declaring @RequiresPermission


UnflaggedApi: android.provider.ParcelableException:
    New API must be flagged with @FlaggedApi: class android.provider.ParcelableException
UnflaggedApi: android.provider.ParcelableException#CREATOR:
    New API must be flagged with @FlaggedApi: field android.provider.ParcelableException.CREATOR
UnflaggedApi: android.provider.ParcelableException#ParcelableException(String, Throwable):
    New API must be flagged with @FlaggedApi: constructor android.provider.ParcelableException(String,Throwable)
UnflaggedApi: android.provider.ParcelableException#describeContents():
    New API must be flagged with @FlaggedApi: method android.provider.ParcelableException.describeContents()
UnflaggedApi: android.provider.ParcelableException#readFromParcel(String, android.os.Parcel):
    New API must be flagged with @FlaggedApi: method android.provider.ParcelableException.readFromParcel(String,android.os.Parcel)
UnflaggedApi: android.provider.ParcelableException#readFromParcel(android.os.Parcel):
    New API must be flagged with @FlaggedApi: method android.provider.ParcelableException.readFromParcel(android.os.Parcel)
UnflaggedApi: android.provider.ParcelableException#writeToParcel(android.os.Parcel, Throwable):
    New API must be flagged with @FlaggedApi: method android.provider.ParcelableException.writeToParcel(android.os.Parcel,Throwable)
UnflaggedApi: android.provider.ParcelableException#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.provider.ParcelableException.writeToParcel(android.os.Parcel,int)
