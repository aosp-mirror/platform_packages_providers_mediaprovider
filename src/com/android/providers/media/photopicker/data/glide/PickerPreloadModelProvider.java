/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.providers.media.photopicker.data.glide;

import static com.android.providers.media.photopicker.ui.ImageLoader.THUMBNAIL_REQUEST;

import static com.bumptech.glide.load.resource.bitmap.Downsampler.PREFERRED_COLOR_SPACE;

import android.content.Context;
import android.provider.MediaStore;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.android.providers.media.photopicker.data.model.Item;
import com.android.providers.media.photopicker.ui.PhotosTabAdapter;

import com.bumptech.glide.Glide;
import com.bumptech.glide.ListPreloader.PreloadModelProvider;
import com.bumptech.glide.RequestBuilder;
import com.bumptech.glide.load.PreferredColorSpace;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.signature.ObjectKey;

import java.util.Collections;
import java.util.List;

/** Custom glide module to enable the loading of thumbnails from CloudMediaProvider. */
public class PickerPreloadModelProvider implements PreloadModelProvider<GlideLoadable> {

    private final Context mContext;
    private final PreferredColorSpace mPreferredColorSpace;
    private final PhotosTabAdapter mAdapter;

    public PickerPreloadModelProvider(Context context, PhotosTabAdapter adapter) {
        mContext = context;
        mAdapter = adapter;

        final boolean isScreenWideColorGamut =
                mContext.getResources().getConfiguration().isScreenWideColorGamut();
        mPreferredColorSpace =
                isScreenWideColorGamut ? PreferredColorSpace.DISPLAY_P3 : PreferredColorSpace.SRGB;
    }

    /**
     * Return a list of items that should be preloaded for the given RecyclerView adapter position.
     *
     * @param position the current position of the RecyclerView's adapter.
     * @return A list of items to begin preloading.
     */
    @Override
    @NonNull
    public List<GlideLoadable> getPreloadItems(int position) {
        if (mAdapter.isItemTypeMediaItem(position)) {
            Object adapterItem = mAdapter.getAdapterItem(position);
            if (adapterItem instanceof Item) {
                Item item = (Item) adapterItem;
                return Collections.singletonList(item.toGlideLoadable());
            }
        }
        return Collections.emptyList();
    }

    /**
     * This should generate a load request identical to the load request generated by the
     * RecyclerView itself. This ensures that there are not inadvertent cache misses because the
     * preload succeeded, but the actual RecyclerView request didn't match what was in the cache
     * already.
     *
     * @param loadable The {@link GlideLoadable} model for the thumbnail.
     * @return An identical glide RequestBuilder to what the RecyclerView will generate when it
     *     attempts to load this item.
     */
    @Override
    @Nullable
    public RequestBuilder getPreloadRequestBuilder(GlideLoadable loadable) {
        RequestOptions options =
                RequestOptions.option(THUMBNAIL_REQUEST, true)
                        .set(PREFERRED_COLOR_SPACE, mPreferredColorSpace);
        // TODO(b/224725723): Remove media store version from key once MP ids are
        // stable.
        ObjectKey signature =
                loadable.getLoadableSignature(/* prefix= */ MediaStore.getVersion(mContext));

        return Glide.with(mContext).asBitmap().apply(options).signature(signature).load(loadable);
    }
}
